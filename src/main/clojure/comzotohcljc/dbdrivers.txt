(ns ^{ :doc ""
       :author "kenl" }
  comzotohcljc.dbio.dbdrivers)

(use '[clojure.tools.logging :only (info warn error debug)])
(import '(com.zotoh.frwk.dbio DBIOError))
(require '[comzotohcljc.util.coreutils :as CU])
(require '[comzotohcljc.util.strutils :as SU])
(use '[comzotohcljc.dbio.dbutils])

(def ^:dynamic *USE_DDL_SEP* true)
(def ^:dynamic *DDL_SEP* "-- :")

(defprotocol DBDriver
  (getTestString [_] )
  (getId [_] ))

(deftype Postgresql [] DBDriver
  (getId [_] :postgresql)
  (getTestString [_] "select 1" ))

(deftype MySQL [] DBDriver
  (getId [_] :mysql)
  (getTestString [_] "select version()" ))

(deftype Oracle [] DBDriver
  (getId [_] :oracle)
  (getTestString [_] "select 1 from DUAL" ))

(deftype SQLServer [] DBDriver
  (getId [_] :sqlserver)
  (getTestString [_] "select count(*) from sysusers" ))

(deftype H2 [] DBDriver
  (getId [_] :h2)
  (getTestString [_] "select 1" ))

(defn- getNotNull [db] "NOT NULL")
(defn- getNull [db] "NULL")
(defn- getPad [db] "    ")

(defn- nullClause [db opt?]
  (if opt? (getNull db) (getNotNull db)))

(defn- genSep [db]
  (if *USE_DDL_SEP* *DDL_SEP* ""))

(defmulti genExec (fn [a & more] (class a)))
(defmethod genExec :default [db] (str ";\n" (genSep db)))

(defmulti genDrop (fn [a & more] (class a)))
(defmethod genDrop :default [db table]
  (str "DROP TABLE " table (genExec db) "\n\n"))

(defmulti genBegin (fn [a & more] (class a)))
(defmethod genBegin :default [db table]
  (str "CREATE TABLE " table "\n(\n"))

(defmulti genEnd (fn [a & more] (class a)))
(defmethod genEnd :default [db] (str "\n)" (genExec db) "\n\n"))

(defmulti genGrant (fn [a & more] (class a)))
(defmethod genGrant :default [db table] "")

(defmulti genEndSQL (fn [a & more] (class a)))
(defmethod genEndSQL :default [db] "")

(defn- genColDef [db col ty opt? dft]
  (str (getPad db) col " " ty " " (nullClause db opt?)
       (if (SU/hgl? dft) (str " DEFAULT "  dft) "")))

(defmulti getFloatKeyword (fn [a & more] (class a)))
(defmethod getFloatKeyword :default [db] "FLOAT")

(defmulti getIntKeyword (fn [a & more] (class a)))
(defmethod getIntKeyword :default [db] "INTEGER")

(defmulti getTSKeyword (fn [a & more] (class a)))
(defmethod getTSKeyword :default [db] "TIMESTAMP")

(defmulti getDateKeyword (fn [a & more] (class a)))
(defmethod getDateKeyword :default [db] "DATE")

(defmulti getBoolKeyword (fn [a & more] (class a)))
(defmethod getBoolKeyword :default [db] "INTEGER")

(defmulti getLongKeyword (fn [a & more] (class a)))
(defmethod getLongKeyword :default [db] "BIGINT")

(defmulti getDoubleKeyword (fn [a & more] (class a)))
(defmethod getDoubleKeyword :default [db] "DOUBLE PRECISION")

(defmulti getStringKeyword (fn [a & more] (class a)))
(defmethod getStringKeyword :default [db] "VARCHAR")

(defmulti getBlobKeyword (fn [a & more] (class a)))
(defmethod getBlobKeyword :default [db] "BLOB")

(defmulti genBytes (fn [a & more] (class a)))
(defmethod genBytes :default [db fld]
  (genColDef db (:column fld) (getBlobKeyword db) (:null fld) ""))

(defmulti genString (fn [a & more] (class a)))
(defmethod genString :default [db fld]
  (genColDef  db (:column fld)
    (str (getStringKeyword db) "(" (:size fld) ")")
    (:null fld)
    (if (:default fld) (:default-value fld) "")))

(defmulti genInteger (fn [a & more] (class a)))
(defmethod genInteger :default [db fld]
  (genColDef db (:column fld) (getIntKeyword db) (:null fld)
    (if (:default fld) (:default-value fld) "")))

(defmulti genAutoInteger (fn [a & more] (class a)))
(defmethod genAutoInteger :default [db table fld] "")

(defmulti genDouble (fn [a & more] (class a)))
(defmethod genDouble :default [db fld]
  (genColDef db (:column fld) (getDoubleKeyword db) (:null fld)
    (if (:default fld) (:default-value fld) "")))

(defmulti genFloat (fn [a & more] (class a)))
(defmethod genFloat :default [db fld]
  (genColDef db (:column fld) (getFloatKeyword db) (:null fld)
    (if (:default fld) (:default-value fld) "")))

(defmulti genLong (fn [a & more] (class a)))
(defmethod genLong :default [db fld]
  (genColDef db (:column fld) (getLongKeyword db) (:null fld)
    (if (:default fld) (:default-value fld) "")))

(defmulti genAutoLong (fn [a & more] (class a)))
(defmethod genAutoLong :default [db table fld] "")

(defmulti getTSDefault (fn [a & more] (class a)))
(defmethod getTSDefault :default [db] "CURRENT_TIMESTAMP")

(defmulti genTimestamp (fn [a & more] (class a)))
(defmethod genTimestamp :default [db fld]
  (genColDef db (:column fld) (getTSKeyword db) (:null fld)
    (if (:default fld) (getTSDefault db) "")))

(defmulti genDate (fn [a & more] (class a)))
(defmethod genDate :default [db fld]
  (genColDef db (:column fld) (getDateKeyword db) (:null fld)
    (if (:default fld) (getTSDefault db) "")))

(defmulti genCal (fn [a & more] (class a)))
(defmethod genCal :default [db fld] (genTimestamp db fld))

(defmulti genBool (fn [a & more] (class a)))
(defmethod genBool :default [db fld]
  (genColDef db (:column fld) (getBoolKeyword db) (:null fld)
      (if (:default fld) (:default-value fld) "")))

(defn- genExIndexes [db table zm]
  (let [ m (:indexes zm) bf (StringBuilder.) ]
    (doseq [ en (seq m) ]
      (let [ nm (first en) cols (last en) ]
        (when (empty? cols) (throw (DBIOError. (str "Cannot have empty index: " nm))))
        (.append bf (str "CREATE INDEX " (.toLowerCase (str table "_" nm)) " ON " table
                    " ( " (clojure.string/join "," cols) " )" (genExec db) "\n\n" ))))
    (.toString bf)))

(defn- genUniques [db zm]
  (let [ m (:uniques zm) bf (StringBuilder.) ]
    (doseq [ en (seq m) ]
      (let [ nm (first en) cols (last en) ]
        (when (empty? cols) (throw (DBIOError. (str "Cannot have empty unique: " nm))))
        (SU/add-delim! bf ",\n"
            (str (getPad db) "UNIQUE(" (clojure.string/join "," cols) ")"))))
    (.toString bf)))

(defn- genPrimaryKey [db pkeys]
  (str (getPad db) "PRIMARY KEY(" (clojure.string/join "," pkeys) ")"))

(defn- genBody [db table zm]
  (let [ inx (StringBuilder.) bf (StringBuilder.) pkeys (atom #{})
         iix (atom 1) ]
    ;; 1st do the columns
    (doseq [ en (seq (:fields zm)) ]
      (let [ fld (last en) cn (.toUpperCase (:column fld))
             dt (:domain fld)
             col (case dt
                  :boolean (genBool db fld)
                  :timestamp (genTimestamp db fld)
                  :date (genDate db fld)
                  :calendar (genCal db fld)
                  :int (if (:auto fld) (genAutoInteger db table fld) (genInteger db fld))
                  :long (if (:auto fld) (genAutoLong db table fld) (genLong db fld))
                  :double (genDouble db fld)
                  :float (genFloat db fld)
                  :string (genString db fld)
                  :bytes (genBytes db fld)
                  (throw (DBIOError. (str "Unsupported domain type " dt)))) ]
        (when (:pkey fld) (reset! pkeys (conj @pkeys cn)))
        (SU/add-delim! bf ",\n" col)))
    ;; now do the assocs
    (doseq [ en (seq (:assocs zm)) ]
      (let [ soc (last en) cn (.toUpperCase (:fkey soc))
             pos @iix
             col (genColDef db cn (getLongKeyword db) true "") ]
        (SU/add-delim! bf ",\n" col)
        (.append inx (str "CREATE INDEX " table "_x" pos " ON " table
                        " ( "  cn " )" (genExec db) "\n\n"))
        (reset! iix (inc pos))))
    ;; now explicit indexes
    (-> inx (.append (genExIndexes db table zm)))
    ;; now uniques, primary keys and done.
    (when (> (.length bf) 0)
      (when (> (.size @pkeys) 0)
        (.append bf (str ",\n" (genPrimaryKey db @pkeys))))
      (let [ s (genUniques db zm) ]
        (when (SU/hgl? s)
          (.append bf (str ",\n" s)))))

    [ (.toString bf) (.toString inx) ] ))

(defn- genOneTable [db zm]
  (let [ table (.toUpperCase (:table zm))
           b (genBegin db table)
           d (genBody db table zm)
           e (genEnd db)
           s1 (str b (first d) e)
           inx (last d) ]
      (str s1 (if (SU/hgl? inx) inx "") (genGrant db table))))

(defn getDDL  ^{ :doc "" }
  [db metaCache]
  (let [ ms (.getMetas metaCache)
         drops (StringBuilder.)
         body (StringBuilder.) ]
    (doseq [ en (seq ms) ]
      (let [ m (last en) id (:id m) tbl (:table m) ]
        (debug "model id: " (name id) " table: " tbl)
        (when (SU/hgl? tbl)
          (-> drops (.append (genDrop db (.toUpperCase tbl) )))
          (-> body (.append (genOneTable db m))))))
    (str "" drops body (genEndSQL db))))

;; H2
(defmethod getDateKeyword H2 [db] "TIMESTAMP")
(defmethod getDoubleKeyword H2 [db] "DOUBLE")
(defmethod getBlobKeyword H2 [db] "BLOB")
(defmethod getFloatKeyword H2 [db] "FLOAT")
(defmethod genAutoInteger H2 [db table fld]
  (str (getPad db) (:column fld) " " (getIntKeyword db)
            (if (:pkey fld) " IDENTITY(1) " " AUTO_INCREMENT(1) ")))
(defmethod genAutoLong H2 [db table fld]
  (str (getPad db) (:column fld) " " (getLongKeyword db)
            (if (:pkey fld) " IDENTITY(1) " " AUTO_INCREMENT(1) ")))
(defmethod genBegin H2 [db table]
  (str "CREATE CACHED TABLE " table "\n(\n" ))
(defmethod genDrop H2 [db table]
  (str "DROP TABLE " table " IF EXISTS CASCADE" (genExec db) "\n\n"))

;; MySQL
(defmethod getBlobKeyword MySQL [db] "LONGBLOB")
(defmethod getTSKeyword MySQL [db] "TIMESTAMP")
(defmethod getDoubleKeyword MySQL [db] "DOUBLE")
(defmethod getFloatKeyword MySQL [db]  "DOUBLE")

(defmethod genEnd MySQL [db table]
  (str "\n) Type=InnoDB" (genExec db) "\n\n"))
(defmethod genAutoInteger MySQL [db table fld]
  (str (getPad db) (:column fld) " " (getIntKeyword db) " NOT NULL AUTO_INCREMENT"))
(defmethod genAutoLong MySQL [db table fld]
  (str (getPad db) (:column fld) " " (getLongKeyword db) " NOT NULL AUTO_INCREMENT"))

(defmethod genDrop MySQL [db table]
  (str "DROP TABLE IF EXISTS " table (genExec db) "\n\n"))

;; Oracle
(defmethod getStringKeyword Oracle [db] "VARCHAR2")
(defmethod getTSDefault Oracle [db] "DEFAULT SYSTIMESTAMP")
(defmethod getLongKeyword Oracle [db] "NUMBER(38)")
(defmethod getDoubleKeyword Oracle [db] "BINARY_DOUBLE")
(defmethod getFloatKeyword Oracle [db] "BINARY_FLOAT")
(defmethod genAutoInteger Oracle [db table fld]
  ;;_ids.put(table, fld)
  (genInteger db fld))
(defmethod genAutoLong Oracle [db table fld]
  ;;_ids.put(table, fld)
  (genLong db fld))
(defmethod genEndSQL Oracle [db] "")
  ;;(str (create_sequence t._1) (create_sequence_trigger t._1, t._2.getId)))
(defmethod genDrop Oracle [db table]
  (str "DROP TABLE " table " CASCADE CONSTRAINTS PURGE" (genExec db) "\n\n"))

;; Postgresql
(defmethod getTSKeyword Postgresql [db] "TIMESTAMP WITH TIME ZONE")
(defmethod getBlobKeyword Postgresql [db] "BYTEA")
(defmethod getDoubleKeyword Postgresql [db] "DOUBLE PRECISION")
(defmethod getFloatKeyword Postgresql [db] "REAL")

(defmethod genCal Postgresql [db fld] (genTimestamp fld))

(defmethod genAutoInteger Postgresql [db table fld]
  (str (getPad db) (:column fld) " " "SERIAL"))

(defmethod genAutoLong Postgresql [db table fld]
  (str (getPad db) (:column fld) " " "BIGSERIAL"))

(defmethod genDrop Postgresql [db table]
  (str "DROP TABLE IF EXISTS " table " CASCADE" (genExec db) "\n\n"))

;; SQLServer
(defmethod getBlobKeyword SQLServer [db] "IMAGE")
(defmethod getTSKeyword SQLServer [db] "DATETIME")
(defmethod getDoubleKeyword SQLServer [db] "FLOAT(53)")
(defmethod getFloatKeyword SQLServer [db] "FLOAT(53)")

(defmethod genAutoInteger SQLServer [db table fld]
  (str (getPad db) (:column fld) " " (getIntKeyword db)
    (if (:pkey fld) " IDENTITY (1,1) " " AUTOINCREMENT ")))

(defmethod genAutoLong SQLServer [db table fld]
  (str (getPad db) (:column fld) " " (getLongKeyword db)
    (if (:pkey fld) " IDENTITY (1,1) " " AUTOINCREMENT ")))

(defmethod genDrop SQLServer [db table]
  (str "IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id=object_id('"
       table "')) DROP TABLE " table (genExec db) "\n\n"))


(println (getDDL (POSTGRESQL.) (make-MetaCache testschema)))



(def ^:private dbdrivers-eof nil)

